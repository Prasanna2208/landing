generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  role             Role
  createdCourses   Course[]
  enrolledCourses  Enrollment[]
  requestedCourses Request[]
  userProgress     UserProgress[]
}

enum Role {
  SUPERADMIN
  ADMIN
  INSTRUCTOR
  USER
}

model Course {
  id           String @id @default(uuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id])

  enrolledUsers Enrollment[]

  title        String      @db.Text
  description  String?     @db.Text
  coverImageId String?     @unique
  coverImage   Attachment? @relation("CoverImage", fields: [coverImageId], references: [id])

  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  modules    Module[]

  attachments    Attachment[]
  requestedUsers Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Module {
  id       String @id @default(uuid())
  title    String @db.Text
  position Int    @db.Integer
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Attachment {
  id           String  @id @default(uuid())
  name         String
  originalName String
  type         String
  isCoverImage Boolean @default(false)
  data         Bytes   @db.ByteA

  courseCoverImage Course? @relation("CoverImage")

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Enrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Article {
  id          String  @id @default(uuid())
  title       String
  content     String?
  position    Int     @db.Integer
  isFree      Boolean @default(false)
  isPublished Boolean @default(false)

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([moduleId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  articleId String
  Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
  @@index([articleId])
}

model Request {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  status STATUS

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
}
